{"version":3,"sources":["components/UserSelector/UserSelector.tsx","utils/fetchClient.ts","types/Notification.ts","components/PostsList/PostsList.tsx","components/NotificationMessage/NotificationMessage.tsx","components/Loader/Loader.tsx","components/NewCommentForm/NewCommentForm.tsx","components/Comments/Comments.tsx","components/PostDetails/PostDetails.tsx","components/Sidebar/Sidebar.tsx","App.tsx","index.tsx"],"names":["UserSelector","users","onUserClick","useState","isActive","setIsActive","selectedUser","setSelectedUser","dropdownRef","useRef","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","ref","className","classNames","type","onClick","name","id","role","map","user","href","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","Notification","client","PostsList","posts","onPostOpen","onPostClose","selectedPost","setSelectedPost","post","title","undefined","handleOpenPost","NotificationMessage","notification","errorType","Loader","NewCommentForm","comments","onAdd","loading","setName","nameVisited","setNameVisited","email","setEmail","emailVisited","setEmailVisited","setBody","commentVisited","setCommentVisited","newCommentId","setNewCommentId","handleBlur","fieldValue","setFieldVisited","trim","handleChange","e","setFieldValue","value","handleError","fieldVisited","length","resetError","onSubmit","preventDefault","postId","postComments","filter","note","maxCommentId","Math","max","el","handleNewCommentId","onReset","htmlFor","placeholder","onChange","onBlur","Comments","onDelete","comment","PostDetails","setComments","isLoading","setIsLoading","NoError","error","setError","noComments","setNoComments","loadingError","setLoadingError","showForm","setShowForm","isLoadingSubmit","setIsLoadingSubmit","showButton","setShowButton","NoCommentsMessage","catch","PostsLoadingError","finally","commentId","updatedComments","newComment","Sidebar","App","setUsers","userPosts","setUserPosts","noPosts","setNoPosts","NoPostsYet","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.33435b5b.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../../types/User';\n\ntype Props = {\n  users: User[];\n  onUserClick: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  onUserClick,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User>();\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        dropdownRef.current\n        && !dropdownRef.current.contains(event.target as Node)\n      ) {\n        setIsActive(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <div\n      ref={dropdownRef}\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isActive,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsActive(!isActive)}\n        >\n          {selectedUser && (\n            <span>{selectedUser.name}</span>\n          )}\n\n          {!selectedUser && (\n            <span>Choose a user</span>\n          )}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames('dropdown-item', {\n                'is-active': selectedUser?.id === user.id,\n              })}\n              onClick={() => {\n                setSelectedUser(user);\n                onUserClick(user);\n                setIsActive(false);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum Notification {\n  NoError = 'No error',\n  NoSelectedUser = 'No user selected',\n  PostsLoadingError = 'Something went wrong!',\n  NoPostsYet = ' No posts yet',\n  CommentsError = 'Something went wrong',\n  NoCommentsMessage = 'No comments yet',\n}\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../../types/Post';\n\ninterface Props {\n  posts: Post[];\n  onPostOpen: (post: Post) => void;\n  onPostClose: () => void;\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onPostOpen,\n  onPostClose,\n}) => {\n  const [selectedPost, setSelectedPost] = useState<Post>();\n\n  const handleOpenPost = (post: Post) => {\n    if (selectedPost?.id !== post.id) {\n      onPostOpen(post);\n      setSelectedPost(post);\n    } else {\n      setSelectedPost(undefined);\n      onPostClose();\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n              <td data-cy=\"PostTitle\">{post.title}</td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link', {\n                    'is-light': (selectedPost?.id !== post.id),\n                  })}\n                  onClick={() => handleOpenPost(post)}\n                >\n                  {(selectedPost?.id === post.id) ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Notification } from '../../types/Notification';\n\ntype Props = {\n  notification: Notification;\n  errorType: string,\n  data: string,\n};\n\nexport const NotificationMessage: React.FC<Props> = ({\n  notification,\n  errorType,\n  data,\n}) => (\n  <div\n    className={`notification ${errorType}`}\n    data-cy={data}\n  >\n    {notification}\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, {\n  Dispatch, SetStateAction, useState,\n} from 'react';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\n\ntype Props = {\n  selectedPost: Post,\n  comments: Comment[],\n  onAdd: (comment: Comment) => void;\n  loading: boolean,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  comments,\n  onAdd,\n  loading,\n}) => {\n  const [name, setName] = useState('');\n  const [nameVisited, setNameVisited] = useState(false);\n\n  const [email, setEmail] = useState('');\n  const [emailVisited, setEmailVisited] = useState(false);\n\n  const [body, setBody] = useState('');\n  const [commentVisited, setCommentVisited] = useState(false);\n\n  const [newCommentId, setNewCommentId] = useState(0);\n\n  const handleBlur = (\n    fieldValue: string,\n    setFieldVisited: Dispatch<SetStateAction<boolean>>,\n  ) => {\n    if (!fieldValue.trim()) {\n      setFieldVisited(true);\n    }\n  };\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n    | React.ChangeEvent<HTMLTextAreaElement>,\n    setFieldValue: Dispatch<SetStateAction<string>>,\n    setFieldVisited: Dispatch<SetStateAction<boolean>>,\n  ) => {\n    setFieldVisited(true);\n    setFieldValue(e.target.value);\n  };\n\n  const handleError = (\n    fieldValue: string,\n    fieldVisited: boolean,\n  ) => {\n    return ((fieldValue.length === 0) && fieldVisited);\n  };\n\n  const resetError = (\n    setFieldValue: Dispatch<SetStateAction<string>>,\n    setFieldVisited: Dispatch<SetStateAction<boolean>>,\n  ) => {\n    setFieldValue('');\n    setFieldVisited(false);\n  };\n\n  const handleNewCommentId = (postId: number) => {\n    const postComments = comments.filter(note => note.postId === postId);\n    const maxCommentId = Math.max(...postComments.map(el => el.id));\n\n    setNewCommentId(maxCommentId + 1);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    handleNewCommentId(selectedPost.id);\n\n    if (!name.trim() || !email.trim() || !body.trim()) {\n      setNameVisited(true);\n      setEmailVisited(true);\n      setCommentVisited(true);\n\n      return;\n    }\n\n    onAdd({\n      id: newCommentId,\n      name,\n      email,\n      body,\n      postId: selectedPost.id,\n    });\n\n    setBody('');\n    setCommentVisited(false);\n  };\n\n  const clearSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    resetError(setName, setNameVisited);\n    resetError(setEmail, setEmailVisited);\n    resetError(setBody, setCommentVisited);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n      onReset={clearSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': handleError(name, nameVisited),\n            })}\n            value={name}\n            onChange={(e) => handleChange(e, setName, setNameVisited)}\n            onBlur={() => handleBlur(name, setNameVisited)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {handleError(name, nameVisited) && (\n            <>\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            </>\n          )}\n        </div>\n\n        {handleError(name, nameVisited) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': handleError(email, emailVisited),\n            })}\n            value={email}\n            onChange={(e) => handleChange(e, setEmail, setEmailVisited)}\n            onBlur={() => handleBlur(email, setEmailVisited)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {handleError(email, emailVisited) && (\n            <>\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            </>\n          )}\n        </div>\n\n        {handleError(email, emailVisited) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': handleError(body, commentVisited),\n            })}\n            value={body}\n            onChange={(e) => handleChange(e, setBody, setCommentVisited)}\n            onBlur={() => handleBlur(body, setCommentVisited)}\n          />\n        </div>\n\n        {handleError(body, commentVisited) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': loading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Comment } from '../../types/Comment';\n\ntype Props = {\n  comments: Comment[];\n  onDelete: (commentId: number) => void;\n};\n\nexport const Comments: React.FC<Props> = ({ comments, onDelete }) => {\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n\n      {comments.map(comment => (\n        <article\n          key={comment.id}\n          className=\"message is-small\"\n          data-cy=\"Comment\"\n        >\n          <div className=\"message-header\">\n            <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n              {comment.name}\n            </a>\n\n            <button\n              data-cy=\"CommentDelete\"\n              type=\"button\"\n              className=\"delete is-small\"\n              aria-label=\"delete\"\n              onClick={() => onDelete(comment.id)}\n            >\n              delete button\n            </button>\n          </div>\n\n          <div className=\"message-body\" data-cy=\"CommentBody\">\n            {comment.body}\n          </div>\n\n        </article>\n      ))}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm/NewCommentForm';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\nimport { Comments } from '../Comments/Comments';\nimport { client } from '../../utils/fetchClient';\nimport { Notification } from '../../types/Notification';\nimport { Loader } from '../Loader';\nimport {\n  NotificationMessage,\n} from '../NotificationMessage/NotificationMessage';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<Notification>(Notification.NoError);\n  const [noComments, setNoComments] = useState(false);\n  const [loadingError, setLoadingError] = useState(false);\n\n  const [showForm, setShowForm] = useState(false);\n  const [isLoadingSubmit, setIsLoadingSubmit] = useState(false);\n\n  const [showButton, setShowButton] = useState(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setShowForm(false);\n    setShowButton(true);\n    setNoComments(false);\n    client\n      .get<Comment[]>(`/comments?postId=${post.id}`)\n      .then((data) => {\n        if (data.length === 0) {\n          setError(Notification.NoCommentsMessage);\n          setNoComments(true);\n        }\n\n        setComments(data);\n      })\n      .catch(() => {\n        setLoadingError(true);\n        setError(Notification.PostsLoadingError);\n      })\n      .finally(() => setIsLoading(false));\n  }, [post]);\n\n  const handleDeleteComment = (commentId: number) => {\n    client\n      .delete(`/comments/${commentId}`)\n      .then(() => {\n        const updatedComments = comments.filter(\n          (comment) => comment.id !== commentId,\n        );\n\n        if (updatedComments.length === 0) {\n          setNoComments(true);\n        }\n\n        setComments(updatedComments);\n      });\n  };\n\n  const handleAddComment = (newComment: Comment) => {\n    setIsLoadingSubmit(true);\n\n    client\n      .post<Comment>('/comments/', newComment)\n      .then(response => {\n        if (comments.length === 0) {\n          setNoComments(false);\n        }\n\n        setComments([...comments, response]);\n      })\n      .finally(() => setIsLoadingSubmit(false));\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n\n          {isLoading && (\n            <Loader />\n          )}\n\n          {!isLoading && loadingError && (\n            <NotificationMessage\n              notification={error}\n              errorType=\"is-danger\"\n              data=\"CommentsError\"\n            />\n          )}\n\n          {!isLoading && !loadingError && noComments && (\n            <p\n              className=\"title is-4\"\n              data-cy=\"NoCommentsMessage\"\n            >\n              No comments yet\n            </p>\n          )}\n\n          {!isLoading && !loadingError && !noComments && (\n            <>\n              <Comments\n                comments={comments}\n                onDelete={handleDeleteComment}\n              />\n            </>\n          )}\n\n          {!isLoading && !loadingError && !noComments && showButton && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => {\n                setShowForm(true);\n                setShowButton(false);\n              }}\n            >\n              Write a comment\n            </button>\n          )}\n\n          {showForm && (\n            <NewCommentForm\n              selectedPost={post}\n              comments={comments}\n              onAdd={handleAddComment}\n              loading={isLoadingSubmit}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { PostDetails } from '../PostDetails/PostDetails';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  post: Post;\n};\n\nexport const Sidebar: React.FC<Props> = ({ post }) => {\n  return (\n    <div\n      data-cy=\"Sidebar\"\n      className={classNames(\n        'tile',\n        'is-parent',\n        'is-8-desktop',\n        'Sidebar',\n        'Sidebar--open',\n      )}\n    >\n      <div className=\"tile is-child box is-success \">\n        <PostDetails\n          post={post}\n        />\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { UserSelector } from './components/UserSelector/UserSelector';\nimport { client } from './utils/fetchClient';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { PostsList } from './components/PostsList/PostsList';\nimport { Notification } from './types/Notification';\nimport {\n  NotificationMessage,\n} from './components/NotificationMessage/NotificationMessage';\nimport { Loader } from './components/Loader';\nimport { Sidebar } from './components/Sidebar/Sidebar';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User>();\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n\n  const [error, setError] = useState<Notification>(Notification.NoError);\n  const [noPosts, setNoPosts] = useState(false);\n  const [loadingError, setLoadingError] = useState(false);\n\n  const [selectedPost, setSelectedPost] = useState<Post>();\n\n  useEffect(() => {\n    client\n      .get<User[]>('/users')\n      .then((data) => setUsers(data));\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoading(true);\n      setNoPosts(false);\n\n      client\n        .get<Post[]>(`/posts?userId=${selectedUser.id}`)\n        .then((data) => {\n          if (data.length === 0) {\n            setError(Notification.NoPostsYet);\n            setNoPosts(true);\n          }\n\n          setUserPosts(data);\n        })\n        .catch(() => {\n          setLoadingError(true);\n          setError(Notification.PostsLoadingError);\n        })\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  const handleSelectedUser = (user: User) => {\n    setSelectedUser(user);\n    setIsLoading(true);\n    setSelectedPost(undefined);\n  };\n\n  const handleSelectedPost = (post: Post) => {\n    setSelectedPost(post);\n  };\n\n  const handleClosedPost = () => {\n    setSelectedPost(undefined);\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onUserClick={handleSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {!isLoading && loadingError && (\n\n                  <NotificationMessage\n                    notification={error}\n                    errorType=\"is-danger\"\n                    data=\"PostsLoadingError\"\n                  />\n                )}\n\n                {!isLoading && !loadingError\n                && selectedUser && noPosts && (\n                  <NotificationMessage\n                    notification={error}\n                    errorType=\"is-warning\"\n                    data=\"NoPostsYet\"\n                  />\n                )}\n\n                {!isLoading && !loadingError\n                && selectedUser && !noPosts && (\n                  <PostsList\n                    posts={userPosts}\n                    onPostOpen={handleSelectedPost}\n                    onPostClose={handleClosedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          {selectedPost && (\n            <Sidebar\n              post={selectedPost}\n            />\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}